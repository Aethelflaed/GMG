%{

#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include <iostream>

#include "Parser.h"
#include "Makefile/Generator.hpp"

extern "C"
{
	int yyparse();
    int yylex();

    int yywrap()
    {
        return 1;
    }

	extern char* yytext;

	void yyerror(const char* str)
	{
		std::cerr << "Error:        \"" << str << "\"" << std::endl;
		std::cerr << "Scanning:     \"" << yytext << "\"" << std::endl;
		std::cerr << "Parser state: \"" << Parser::getParser().getState() << "\"" << std::endl;
	}
}

%}

%union
{
	char String[256];
	long long Integer;
	unsigned int Natural;
	int Boolean;
	double Double;
	float Float;
}

%token T_EXIT
%token T_HELP

%token T_LIST

%token T_ADD
%token T_EDIT
%token T_RM
%token T_SET

%token <String>T_BOOL_OPTION
%token <Boolean>T_BOOL_VALUE

%token <String>T_CONFIG_PARAM

%token T_PATH
%token T_DEPENDENCY

%token T_TARGET
%token T_CONFIG
%token T_TOOL

%token T_END
%token T_MODULE
%token T_VERSION

%token T_TYPE
%token <Natural>T_TARGET_TYPE

%token <String>T_FILE
%token <String>T_NUMBER
%token <String>T_WORD

%type <Natural>help_command

%type <String>quoted_name
%type <String>quoted_file
%type <Boolean>bool_value

%start configurations

%%

configurations: /* empty */
			  | configurations configuration
	{
		Parser::getParser().prompt();
	}

configuration: target
			 | config
			 | help
			 | newline
			 | exit

exit: T_EXIT
   {
		if (Parser::getParser().isInteractive())
		{
			std::cout << "Bye!" << std::endl;
		}

		Parser::getParser().getMakefileGenerator().generate();

		exit(0);
   }

help: T_HELP help_command newline
	{
		Parser::getParser().help($2);
	}
	| T_HELP newline
	{
		Parser::getParser().help(0);
	}

help_command: T_TARGET		{ $$ = T_TARGET;	}
			| T_CONFIG		{ $$ = T_CONFIG;	}

config: T_CONFIG config_command

config_command: config_bool_param
			  | config_path_param
			  | config_param
			  | config_list

config_bool_param: T_SET T_BOOL_OPTION bool_value newline
	{
		Makefile::Config& config = Parser::getParser().getCurrentConfig();
		char firstChar = (char) tolower((int) $2[0]);
		if (firstChar == 'd')
		{
			config.setDebug($3 != 0);
		}
		else
		{
			config.setVerbose($3 != 0);
		}
	}

config_path_param: T_ADD T_CONFIG_PARAM T_PATH quoted_file newline
	{
		Makefile::Config& config = Parser::getParser().getCurrentConfig();
		char firstChar = (char) tolower((int) $2[0]);
		if (firstChar == 'i')
		{
			config.addIncludePath($4);
		}
		else
		{
			config.addLibraryPath($4);
		}
	}

config_param: T_ADD T_CONFIG_PARAM quoted_file newline
	{
		Parser::getParser().getCurrentConfig().addLibrary($3);
	}

config_list: T_LIST newline
	{
		if (Parser::getParser().isInteractive())
		{
			std::cout << Parser::getParser().getCurrentConfig() << std::endl;
		}
	}

/* Targets configuration */

target:	T_TARGET target_command
	  | target_mode

/* Target commands : add, edit, remove, list */

target_command: target_add
			  | target_edit
			  | target_rm
			  | target_list

target_add: T_ADD quoted_name newline
	{
		try
		{
			Parser& parser = Parser::getParser();
			parser.setTarget(&(parser.getMakefileGenerator().addTarget($2)));
			parser.pushState(TARGET);
		}
		catch (const std::invalid_argument& ex)
		{
			std::cerr << ex.what() << std::endl;
		}
	}

target_edit: T_EDIT quoted_name newline
	{
		try
		{
			Parser& parser = Parser::getParser();
			parser.setTarget(&parser.getMakefileGenerator().getTarget($2));
			parser.pushState(TARGET);
		}
		catch (const std::out_of_range& ex)
		{
			std::cerr << ex.what() << std::endl;
		}
	}

target_rm: T_RM quoted_name newline
	{
		try
		{
			Parser::getParser().getMakefileGenerator().removeTarget($2);
		}
		catch (const std::out_of_range& ex)
		{
			std::cerr << ex.what() << std::endl;
		}
	}

target_list: T_LIST newline
	{
		if (Parser::getParser().isInteractive())
		{
			std::cout << "Targets list :" << std::endl;
			for (auto pair : Parser::getParser().getMakefileGenerator().getTargets())
			{
				std::cout << *(pair.second) << std::endl;
			}
		}
	}

/* Target configuration, i.e. specific to a target */

target_mode: T_END newline
	{
		Parser::getParser().setTarget(nullptr);
		Parser::getParser().popState();
	}
		   | T_LIST newline
	{
		if (Parser::getParser().isInteractive())
		{
			std::cout << Parser::getParser().getTarget() << std::endl;
		}
	}
		   | target_mode_param
		   | target_mode_add_values
		   | target_mode_rm_values

target_mode_param: T_SET T_VERSION T_NUMBER newline
	{
		Parser::getParser().getTarget().setVersion($3);
	}
				 | T_SET T_TYPE T_TARGET_TYPE newline
	{
		Parser::getParser().getTarget().setType(Makefile::TargetType($3));
	}

target_mode_add_values: T_ADD T_MODULE quoted_file newline
	{
		Parser::getParser().getTarget().addModule($3);
	}
					  | T_ADD T_DEPENDENCY quoted_name newline
	{
		Parser::getParser().getTarget().addDependency($3);
	}

target_mode_rm_values: T_RM T_MODULE quoted_file newline
	{
		try
		{
			Parser::getParser().getTarget().removeModule($3);
		}
		catch (const std::out_of_range& ex)
		{
			std::cerr << ex.what() << std::endl;
		}
	}
					 | T_RM T_DEPENDENCY quoted_name newline
	{
		try
		{
			Parser::getParser().getTarget().removeDependency($3);
		}
		catch (const std::out_of_range& ex)
		{
			std::cerr << ex.what() << std::endl;
		}
	}

/* Values */

quoted_name: '"' T_WORD '"'
		   {
				strcpy($$, $2);
		   }

quoted_file: '"' T_FILE '"'
		   {
				strcpy($$, $2);
		   }
		   | '"' T_WORD '"'
		   {
				strcpy($$, $2);
		   }

bool_value: T_BOOL_VALUE
		  {
				$$ = $1;
		  }
		  | T_NUMBER
		  {
				$$ = strtol($1, nullptr, 10) != 0;
		  }

newline: '\n'

%%

