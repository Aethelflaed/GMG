%{
#include <string.h>
#include <stdlib.h>

#include <iostream>

#include "Makefile/Options.hpp"

extern "C"
{
	int yyparse();
    int yylex();

    int yywrap()
    {
        return 1;
    }

	void yyerror(const char* str)
	{
		std::cerr << "Error : " << str << std::endl;
	}
}

using namespace Makefile;

%}

%union
{
	char string[100];
	int integer;
	void* pointer;
	char* charPointer;
}

%token T_OPTION
%token T_TARGET
%token T_SET
%token T_ADD
%token T_EDIT
%token T_RM
%token T_END
%token T_LIST
%token <string> T_NAME
%token <integer> T_VALUE

%start configurations

%%

configurations: /* empty */
			  | end
			  | configurations configuration

end: T_END
   {
				std::cout << "Bye Bye!" << std::endl;
				exit(0);
   }

configuration:/* target
			 |*/ option

option: T_OPTION option_command
	  {
	  }

option_command: T_SET T_NAME T_VALUE
			{
				if (strcmp($2, "debug") == 0)
				{
					Options::currentOptions().setDebug($3 == (int)'t' || ($3 != (int)'f' && $3 != 0));
				}
				else if (strcmp($2, "verbose") == 0)
				{
					Options::currentOptions().setVerbose($3 == (int)'t' || ($3 != (int)'f' && $3 != 0));
				}
			}
				| T_LIST
			{
				std::cout << "Debug\t: " << Options::currentOptions().getDebug() << std::endl;
				std::cout << "Verbose\t: " << Options::currentOptions().getVerbose() << std::endl;
			}


/*
target:	T_TARGET target_command

target_command: add
			  | edit
			  | rm
			  | list
*/

%%

